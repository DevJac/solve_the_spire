* Design
** Agents
*** Combat agents
**** Simplified card playing agent
Selects card to play. We'll keep the "attack lowest HP enemy" logic for now.
***** Receives / State
- Encoded draw pile
- Encoded discard pile
- Player details, player block, attack difference (attack - block)
- Embedded-max-pool of full draw pile
- Card to weigh for play
**** Card playing agent
This agent answers one or two questions:

1. What card or potion should I play?
2. What target should I play the card/potion against?

Not all cards/potions have targets, so the second question will not always need to be answered.
***** New Plan
Feed networks and potions through an embedding network, max pool the embeddings, this will give you a hand / potion representation.

Feed that hand / potion representation into a policy network, along with each individual card / potion. For 10 cards, you will evaluate the policy network 10 times, each time with the same hand represntation, but for different individual cards. (Maybe embed the individual cards / potions as well.)

Then choose the card / potion to play based on the output weights.

This idea is inspired by Discord user rrenaud.
***** New Plan Receives / State
- Encoded draw pile
- Encoded discard pile
- Player details
- Incomming attack, player block, attack difference (attack - block)
- Embedded-max-pool of full draw pile
- Embedded-max-pool of all monsters
- Embedded-max-pool of all potions
- Card to weigh
- Potion to weigh
- Monster to weigh
***** Receives / State
- Encoded draw pile
- Encoded discard pile
- Hand details, zero padded, shuffled, all cards (not just playable cards)
- Monster details, zero padded, shuffled
- Player details
- One-hot encoded potions
- Incomming attack, player block, attack difference (attack - block)
****** Hand card details
- One-hot encoded card
- Cost
- Upgrades
****** Monster details
- Encoded monster powers
- Move hits, hit damage, total damage
- Block
- Current HP, max HP, HP ratio (current HP / max HP)
******* Monster power details
- One-hot encoded power category / id
- Power amount
****** Player details
- Current HP, max HP, HP ratio (current HP / max HP)
- Block
- Encoded player powers
******* Player power details
- One-hot encoded power category / id
- Power amount
****** Encoded draw and discard piles
- One-hot encoded card category / id
- Mean-hot encoded card upgrades
***** Outputs / Action
- Card/potion weights
- Target weights

The applicable weights will be run though a softmax function to give the final percentages for the playable actions.
***** Training / Reward
Reward is amount of HP lost.
**** Keyword agents
- Discard agent
- Retain agent
- Forethought agent
*** Other agents
**** Card selection agent
Receives: relics, potions, cards in deck, player stats, floor, gold, available cards
Outputs: weights for available cards, weight for skip

This allows us to pick cards and build our deck.
**** Event agent
**** Map agent
**** Discard / special card selection agent
** Agent coordination
There is a pile of agents. Every agent receives every state. Agents indicate whether they will handle each state. Throw an error if multiple states try to handle the same state.

This allows each agent to be isolated. When playing cards in combat, the card playing agent can step in and say "I got this" then choose the best move. The card playing agent can also keep an eye on all other states in order to determine its own rewards.
* Refactor
- [ ] .
- [ ] ├── agent.jl
- [ ] ├── notes.org
- [ ] ├── README.md
- [X] ├── relay.jl
- [ ] ├── src
- [X] │   ├── Encoders.jl
- [X] │   ├── Networks.jl
- [X] │   ├── SARSM.jl
- [ ] │   ├── STSAgents.jl
- [X] │   └── Utils.jl
- [X] └── test
- [X]     ├── Encoders.jl
- [X]     ├── Networks.jl
- [X]     ├── runtests.jl
- [X]     ├── SARSM.jl
- [X]     └── Utils.jl
